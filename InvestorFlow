        private static IEnumerable<AnnouncementModel> GetFilteredAnnouncementForUserUsingFilter(IEnumerable<AnnouncementViewEntity> announcements,
        int userId, List<int> filterByDocumentCategoryIds, List<string> filterByPostedDates, bool thumbnailVisibility)
        {
            IEnumerable<AnnouncementModel> FilteredAnnouncement = null;

            FilteredAnnouncement = (
                from announcement in announcements
                where filterByDocumentCategoryIds.Contains(announcement.DocumentCategoryID ?? 0)
                where announcement.Posted.Date >= DateTime.Parse(filterByPostedDates[0]) && announcement.Posted.Date <= DateTime.Parse(filterByPostedDates[1])
                select AnnouncementModel.MapFrom(announcement, thumbnailVisibility)
                ).Distinct();

            FilteredAnnouncement = FilteredAnnouncement.Select(annModel =>
            {
                annModel.AnnouncementDetails = GetAnnouncementDetails(annModel.AnnouncementId).ToList();

                int vehicleIDInt = annModel.vehicleID ?? 0;

                if (vehicleIDInt != 0)
                {
                    IFS.Platform.Managers.VehicleManager vehicleManager = new IFS.Platform.Managers.VehicleManager();
                    VehicleEntity vehicleEntity = vehicleManager.GetVehicle(vehicleIDInt);
                    annModel.VehicleGuid = vehicleEntity.VehicleGuid;
                    annModel.VehicleDisclaimerAcceptRequired = vehicleManager.IsDisclaimerAcceptRequiredForVehicle(userId, vehicleIDInt);
                }
                return annModel;
            });

            return FilteredAnnouncement;
        }
